/***
	Code of application specific functions for the FPGA engine.
	User has to customise this file.
*/

import com.maxeler.maxcompiler.v0.utils.MathUtils;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStruct;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;

public class Func{

	/***
		User customised sampling function
	*/
	public static DFEStruct sampling(SmcKernel smc, DFEStruct s_in, DFEStruct r_in, DFEStruct seeds, DFEVar S, DFEVar idxInP) {

		DFEStruct s_out = Def.state_t.newInstance(smc);

		DFEVar distFloat = r_in.get("d");
		DFEVar rotFloat = r_in.get("r");
		DFEVar xFloat = s_in.get("x");
		DFEVar yFloat = s_in.get("y");
		DFEVar hFloat = s_in.get("h");

		// Convert to fixed-point
		DFEVar dist = distFloat.cast(Def.fixed_t);
		DFEVar rot = rotFloat.cast(Def.fixed_t);
		DFEVar x = xFloat.cast(Def.fixed_t);
		DFEVar y = yFloat.cast(Def.fixed_t);
		DFEVar h = hFloat.cast(Def.fixed_t);

		DFEVar seed_a = seeds.get("a");
		DFEVar seed_b = seeds.get("b");
		DFEVar seed_c = seeds.get("c");
		
		s_out.get("x") <== (idxInP===0 ? x + KMath.nrand(smc, seed_a, dist, S*0.5).cast(Def.fixed_t) * KMath.cos(h) : x).cast(Def.float_t);
		s_out.get("y") <== (idxInP===0 ? y + KMath.nrand(smc, seed_b, dist, S*0.5).cast(Def.fixed_t) * KMath.sin(h) : y).cast(Def.float_t);
		s_out.get("h") <== (idxInP===0 ? h + KMath.nrand(smc, seed_c, rot, S*0.1).cast(Def.fixed_t) : h).cast(Def.float_t);

		// Uncomment the line below for debugging
		//smc.debug.simPrintf("Position: %f %f %f\n", x, y, h);

		return s_out;
	}

	/***
		User customised weighting function
	*/
	public static DFEVar weighting(SmcKernel smc, DFEStruct s_in, DFEVector<DFEVar> o_in, DFEVar w_in, DFEVar S, DFEVar n, DFEVar h, DFEVar p, DFEVar idxInP, DFEVar weight_valid) {

		// Observation input
		DFEVector<DFEVar> obsrv = Def.sensor_fixed_t.newInstance(smc);
		for (int i=0; i<Def.NSensor; i++){
			obsrv[i] <== o_in[i].cast(Def.fixed_t);
		}
		DFEVector<DFEVar> obsrvHold = Reductions.streamHold(obsrv, n===0 & h===0 & p===0);

		// Score calculation
		DFEVector<DFEVar> obsrvEst = est(smc,s_in,idxInP, weight_valid);
		DFEVector<DFEVar> base = Def.sensor_fixed_longlong_t.newInstance(smc);
		for (int i=0; i<Def.NSensor; i++){
			base[i] <== KMath.powSq((obsrvEst[i]-obsrvHold[i]).cast(Def.fixed_longlong_t));
		}
		DFEVar sum = KMath.addTreeVector(base,0,19);
		//smc.optimization.pushDSPFactor(0);
		DFEVar score = idxInP>=Def.NWall ? KMath.exp((sum*-0.1*Def.NSensor*S.cast(Def.fixed_longlong_t)).cast(Def.float_t)) : 0;
		//smc.optimization.popDSPFactor();
		// Weight accumulation
		DFEVar weight = score*w_in;

		// Uncomment the line below for debugging
		//smc.debug.simPrintf("Score: %f\n", obsrvEst);
		//smc.debug.simPrintf("Weight %f\n", weight);
		//DFEVar test_x = s_in.get("x");
		//DFEVar test_y = s_in.get("y");
		//smc.debug.simPrintf(weight_valid, "(%f, %f) %f\n", Reductions.streamHold(test_x,idxInP===0), Reductions.streamHold(test_y,idxInP===0), weight);

		return weight;
	}

	/*** 
		Calculate observation value based on state
	*/
	private static DFEVector<DFEVar> est(SmcKernel smc, DFEStruct s_in, DFEVar idxInP, DFEVar weight_valid) {

		DFEVar xFloat = s_in.get("x");
		DFEVar yFloat = s_in.get("y");
		DFEVar hFloat = s_in.get("h");

		// Convert to fixed-point
		DFEVar x = xFloat.cast(Def.fixed_t);
		DFEVar y = yFloat.cast(Def.fixed_t);
		DFEVar h = hFloat.cast(Def.fixed_t);
		DFEVar x_robot = Reductions.streamHold(x, idxInP===0);
		DFEVar y_robot = Reductions.streamHold(y, idxInP===0);
		DFEVar h_base = Reductions.streamHold(h, idxInP===0);
		smc.optimization.limitFanout(x, 20);
		smc.optimization.limitFanout(y, 20);
		smc.optimization.limitFanout(h, 20);
		smc.optimization.limitFanout(x_robot, 20);
		smc.optimization.limitFanout(y_robot, 20);
		smc.optimization.limitFanout(h_base, 20);

		// Map information in ROMs
		double axMap[] = new double[Def.NWall];
		double ayMap[] = new double[Def.NWall];
		double bxMap[] = new double[Def.NWall];
		double byMap[] = new double[Def.NWall];
		axMap[0] = 0; 	ayMap[0] = 0;	bxMap[0] = 0; 	byMap[0] = 12;
		axMap[1] = 0; 	ayMap[1] = 12; 	bxMap[1] = 18; 	byMap[1] = 12;
		axMap[2] = 18; 	ayMap[2] = 12; 	bxMap[2] = 18; 	byMap[2] = 0;
		axMap[3] = 18; 	ayMap[3] = 0; 	bxMap[3] = 0; 	byMap[3] = 0;
		axMap[4] = 0; 	ayMap[4] = 6; 	bxMap[4] = 4; 	byMap[4] = 6;
		axMap[5] = 8; 	ayMap[5] = 6; 	bxMap[5] = 16; 	byMap[5] = 6;
		axMap[6] = 6; 	ayMap[6] = 6; 	bxMap[6] = 6; 	byMap[6] = 12;
		axMap[7] = 12; 	ayMap[7] = 6; 	bxMap[7] = 12; 	byMap[7] = 12;
		Memory<DFEVar> axRom = smc.mem.alloc(Def.fixed_t,Def.NWall);
		axRom.setContents(axMap);
		Memory<DFEVar> ayRom = smc.mem.alloc(Def.fixed_t,Def.NWall);
		ayRom.setContents(ayMap);
		Memory<DFEVar> bxRom = smc.mem.alloc(Def.fixed_t,Def.NWall);
		bxRom.setContents(bxMap);
		Memory<DFEVar> byRom = smc.mem.alloc(Def.fixed_t,Def.NWall);
		byRom.setContents(byMap);

		DFEVar wallCycle = idxInP < Def.NWall;
		DFEVar addr = idxInP.cast(KernelLib.dfeUInt(MathUtils.bitsToRepresent(Def.NWall-1)));
		DFEVar ax = wallCycle ? axRom.read(addr) : x-0.2;
		DFEVar ay = wallCycle ? ayRom.read(addr) : y-0.2;
		DFEVar bx = wallCycle ? bxRom.read(addr) : x+0.2;
		DFEVar by = wallCycle ? byRom.read(addr) : y+0.2;
		smc.optimization.limitFanout(ax, 20);
		smc.optimization.limitFanout(ay, 20);
		smc.optimization.limitFanout(bx, 20);
		smc.optimization.limitFanout(by, 20);

		DFEVector<DFEVar> obsrvEst = Def.sensor_fixed_t.newInstance(smc);
		for (int i=0; i<Def.NSensor; i++){
			DFEVar h_curr = h_base + Def.h_step*i;
			DFEVar cos_h = KMath.cos(h_curr);
			DFEVar sin_h = KMath.sin(h_curr);
			DFEVar dist = dist2Obj(smc,x_robot,y_robot,cos_h,sin_h,ax,ay,bx,by);
			// Hold distance to walls
			DFEVar obsrvWall = Reductions.streamHold(KMath.minTreeStream8(smc,dist),idxInP===Def.NWall-1);
			// Take distances to moving objects into account
			obsrvEst[i] <== KMath.min(obsrvWall, KMath.minTreeStream(smc,dist,0,Def.Obj-1));

			// Uncomment the line below for debugging
			//smc.debug.simPrintf(weight_valid & i==0, "(%f, %f) %f---[%f, %f]\n", x_robot, y_robot, obsrvEst[0], obsrvWall, dist);
		}

		return obsrvEst;
	}

	private static DFEVar dist2Obj(SmcKernel smc, DFEVar x, DFEVar y, DFEVar cos_h, DFEVar sin_h, DFEVar ax, DFEVar ay, DFEVar bx, DFEVar by){

		DFEVar dy = by-ay;
		DFEVar dx = bx-ax;
		DFEVar pa = dy.cast(Def.fixed_long_t) * (ax-x).cast(Def.fixed_long_t) - dx.cast(Def.fixed_long_t) * (ay-y).cast(Def.fixed_long_t);
		//smc.optimization.pushDSPFactor(0);
		DFEVar pb = dy * cos_h - dx * sin_h;
		//smc.optimization.popDSPFactor();
		DFEVar temp = pb===0 ? 31 : pa.cast(Def.float_short_t)/pb.cast(Def.float_short_t);
		DFEVar dist = temp < 0 ? 31 : temp.cast(Def.fixed_t);
		DFEVar x_check = x + dist * cos_h;
		DFEVar y_check = y + dist * sin_h;
		DFEVar cond_a = (x_check-ax)>=-0.01 & (x_check-bx)<=0.01;
		DFEVar cond_b = (x_check-ax)<=0.01 & (x_check-bx)>=-0.01;
		DFEVar cond_c = (y_check-ay)>=-0.01 & (y_check-by)<=0.01;
		DFEVar cond_d = (y_check-ay)<=0.01 & (y_check-by)>=-0.01;
		DFEVar cond_e = ((cond_a | cond_b) & (cond_c | cond_d));

		// Uncomment the line below for debugging
		//smc.debug.simPrintf("%f %f %f\n", x_check, y_check, dist);

		return cond_e ? dist : smc.constant.var(Def.fixed_t,31);
	}

	public static DFEVector<DFEStruct> state_conv_in(SmcKernel smc, DFEVector<DFEStruct> s_in) {
		
		DFEVector<DFEStruct> s_out = Def.state_int_t.newInstance(smc);

		for(int j=0; j<Def.NC_P; j++){
			s_out[j].get("x") <== s_in[j].get("x").cast(Def.float_t);
			s_out[j].get("y") <== s_in[j].get("y").cast(Def.float_t);
			s_out[j].get("h") <== s_in[j].get("h").cast(Def.float_t);
		}
		return s_out;
	}

	public static DFEStruct ref_conv_in(SmcKernel smc, DFEStruct r_in) {
		
		DFEStruct r_out = Def.ref_t.newInstance(smc);

		r_out.get("d") <== r_in.get("d").cast(Def.float_t);
		r_out.get("r") <== r_in.get("r").cast(Def.float_t);

		return r_out;
	}

	public static DFEVector<DFEVar> obsrv_conv_in(SmcKernel smc, DFEVector<DFEVar> o_in) {
		
		DFEVector<DFEVar> o_out = Def.sensor_float_t.newInstance(smc);

		for (int i=0; i<Def.NSensor; i++){
			o_out[i] <== o_in[i].cast(Def.float_t);
		}
		return o_out;
	}

	public static DFEVector<DFEVar> weight_conv_out(SmcKernel smc, DFEVector<DFEVar> w_in) {
		
		DFEVector<DFEVar> w_out = Def.weight_io_t.newInstance(smc);

		for(int j=0; j<Def.NC_P; j++)
			w_out[j] <== w_in[j].cast(Def.float_std_t);
		return w_out;
	}

	public static DFEVector<DFEStruct> state_conv_out(SmcKernel smc, DFEVector<DFEStruct> s_in) {
		
		DFEVector<DFEStruct> s_out = Def.state_io_t.newInstance(smc);

		for(int j=0; j<Def.NC_P; j++){
			s_out[j].get("x") <== s_in[j].get("x").cast(Def.float_std_t);
			s_out[j].get("y") <== s_in[j].get("y").cast(Def.float_std_t);
			s_out[j].get("h") <== s_in[j].get("h").cast(Def.float_std_t);
		}
		return s_out;
	}

}
