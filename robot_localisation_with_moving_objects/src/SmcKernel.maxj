/* vim: set filetype=java : */

import com.maxeler.maxcompiler.v0.utils.MathUtils;
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.WrapMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Mem.RamWriteMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStruct;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.OffsetExpr;

class SmcKernel extends Kernel {

	protected SmcKernel(KernelParameters parameters) {
		super(parameters);

		// Setup counters
		DFEVar itl_inner = io.scalarInput("itl_inner", dfeUInt(32)); // determined at run-time
		DFEVar NP = io.scalarInput("NP", dfeUInt(MathUtils.bitsToRepresent(Def.NPMax-1))); // determined at run-time
		DFEVar S = io.scalarInput("S", Def.compType); // determined at run-time
		OffsetExpr offsetNP = stream.makeOffsetParam("offsetNP",0,Def.NPMax-Def.NPMin); // determined at run-time
		Counter a_counter = control.count.makeCounter(
					control.count.makeParams(
						MathUtils.bitsToRepresent(Def.NA))
						.withMax(Def.NA)
				);
		DFEVar a = a_counter.getCount(); // agents
		DFEVar p_counter_en = Def.NA==1 ? constant.var(dfeUInt(1),1) : a_counter.getWrap();
		Counter p_counter = control.count.makeCounter(
					control.count.makeParams(MathUtils.bitsToRepresent(Def.NPMax-1))
						.withEnable(p_counter_en)
						.withWrapMode(WrapMode.STOP_AT_MAX)
						.withMax(NP)
				);
		DFEVar p = p_counter.getCount(); // particles
		DFEVar h = Def.H==1 ? dfeUInt(1).newInstance(this) : dfeUInt(MathUtils.bitsToRepresent(Def.H-1)).newInstance(this);
		DFEVar h_counter_en = dfeUInt(1).newInstance(this);
		if (Def.H>1){
			Counter h_counter = control.count.makeCounter(
					control.count.makeParams(MathUtils.bitsToRepresent(Def.H-1))
					.withEnable(p_counter.getWrap())
					.withMax(Def.H)
					);
			h <== h_counter.getCount(); // horizon
			h_counter_en <== h_counter.getWrap();
		}
		else{
			h <== constant.var(dfeUInt(1),0);
			h_counter_en <== constant.var(dfeUInt(1),1);
		}
		Counter n_counter = control.count.makeCounter(
				control.count.makeParams(32)
				.withEnable(h_counter_en)
				.withMax(itl_inner)
				);
		DFEVar n = n_counter.getCount(); // itl_inner

		Counter idxInP_counter = control.count.makeCounter(
				control.count.makeParams(32)
				.withMax(Def.slotOfP)
				);
		DFEVar idxInP = idxInP_counter.getCount(); // index inside a robot particle
		Counter idxOfP_counter = control.count.makeCounter(
				control.count.makeParams(32)
				.withEnable(idxInP_counter.getWrap())
				);
		DFEVar idxOfP = idxOfP_counter.getCount(); // index of a robot particle
		Counter weight_valid_counter = control.count.makeCounter(
				control.count.makeParams(32)
				.withEnable(idxInP!==0)
				.withMax(Def.Obj)
				);
		DFEVar weight_update = weight_valid_counter.getCount()===0; // index of a robot particle
		DFEVar weight_valid = weight_valid_counter.getCount()===Def.Obj-1; // index of a robot particle

		// Setup inputs
		DFEVar init = control.count.makeCounter(
				control.count.makeParams(MathUtils.bitsToRepresent(3))
				.withWrapMode(WrapMode.STOP_AT_MAX)
				.withMax(3)
				).getCount()<3;
		DFEVector<DFEStruct> seeds = io.input("seed_in", Def.seeds_input_t, init); // seeds for random number generators
		DFEVector<DFEStruct> s_in = io.input("state_in", Def.state_io_t, h===0); // state input, only the first horizon (h==0) is taken from the input
		DFEStruct c_in = io.input("ref_in", Def.ref_t, n===0 & h===0 & p<=(Def.NA==1? 1 : 0)); // reference input, taken once per time step
		DFEVector<DFEVar> o_in = io.input("obsrv_in", Def.sensor_t, n===0 & h===0 & p < (Def.NA<4? 4 : Def.NA)); // observation input

		// Calculate weights
		DFEVector<DFEStruct> particle = Def.particle_array_t.newInstance(this);
		DFEVector<DFEVar> w_in = Def.weight_io_t.newInstance(this);
		DFEVector<DFEVar> weight_out = Def.weight_io_t.newInstance(this);
		DFEVector<DFEStruct> state_out = Def.state_io_t.newInstance(this);
		for(int i=0; i<Def.NC_inner; i++)
			for(int j=0; j<Def.NC_P; j++)
				particle[i*Def.NC_P+j] <== SmcCore(s_in[j], c_in, o_in, w_in[j], seeds[i*Def.NC_inner+j], n, h, p, a, offsetNP, S, idxOfP, idxInP, weight_update); // SMC core computation
		for(int j=0; j<Def.NC_P; j++){
			if (Def.NC_inner==1){
				DFEVar temp_w = particle[j].get("w");
				DFEStruct temp_s = particle[j].get("s");
				weight_out[j] <== temp_w;
				state_out[j] <== temp_s;
			}else if (Def.NC_inner==2){
				DFEVar temp_w_1 = particle[j].get("w");
				DFEVar temp_w_2 = particle[Def.NC_P+j].get("w");
				DFEStruct temp_s = particle[j].get("s");
				weight_out[j] <== temp_w_1 * (itl_inner-1<=0 ? 1 : temp_w_2);
				state_out[j] <== temp_s;
			}else if (Def.NC_inner==3){
				DFEVar temp_w_1 = particle[j].get("w");
				DFEVar temp_w_2 = particle[Def.NC_P+j].get("w");
				DFEVar temp_w_3 = particle[2*Def.NC_P+j].get("w");
				DFEStruct temp_s = particle[j].get("s");
				weight_out[j] <== temp_w_1 * (itl_inner-1<=0 ? 1 : temp_w_2) * (itl_inner-2<=0 ? 1 : temp_w_3);
				state_out[j] <== temp_s;
			}else{
				DFEVar temp_w_1 = particle[j].get("w");
				DFEVar temp_w_2 = particle[Def.NC_P+j].get("w");
				DFEVar temp_w_3 = particle[2*Def.NC_P+j].get("w");
				DFEVar temp_w_4 = particle[3*Def.NC_P+j].get("w");
				DFEStruct temp_s = particle[j].get("s");
				DFEVar weight_01 = temp_w_1 * (itl_inner-1<=0 ? 1 : temp_w_2);	
				DFEVar weight_23 = itl_inner-2<=0 ? 1 : temp_w_3 * (itl_inner-3<=0 ? 1 : temp_w_4);	
				weight_out[j] <== weight_01 * weight_23;
				state_out[j] <== temp_s;
			}
			w_in[j] <== n===0 ? 1.0 : stream.offset(weight_out[j], -1*Def.NA*Def.H*Def.NPMin-Def.NA*Def.H*offsetNP);
		}
		io.output("weight_out", Def.weight_io_t, n.cast(dfeUInt(32))===(KMath.ceil(itl_inner/(Def.NC_inner*1.0))-1) & h===(Def.H-1) & weight_valid) <== weight_out;
		io.output("state_out", Def.state_io_t, n.cast(dfeUInt(32))===(KMath.ceil(itl_inner/(Def.NC_inner*1.0))-1) & h===(Def.H-1)) <== state_out;
	}

	private DFEStruct SmcCore(DFEStruct s_in, DFEStruct c_in, DFEVector<DFEVar> o_in, DFEVar w_in, DFEStruct seeds, DFEVar n, DFEVar h, DFEVar p, DFEVar a, OffsetExpr offsetNP, DFEVar S, DFEVar idxOfP, DFEVar idxInP, DFEVar weight_update){
		
		DFEStruct particle = Def.particle_t.newInstance(this);
		DFEStruct state_in = s_in;
		DFEStruct ref_in = getControl(a, c_in, n===0 & h===0 & p===0);
		DFEVector<DFEVar> obsrv_in = o_in;
		DFEVar weight_in = w_in;

		DFEStruct state_current = Def.state_t.newInstance(this);
		DFEStruct state_next = Def.state_t.newInstance(this);

		// Sampling: calculate next state using current state
		// User please customises Func.maxj:sampling
		state_current <== h===0 ? state_in : stream.offset(state_next, -1*Def.NA*Def.NPMin-Def.NA*offsetNP);
		state_next <== Func.sampling(this, state_current, ref_in, seeds, S, idxInP);

		// Weighting: calculate normalised weights of particles
		// User please customises Func.maxj:weighting
		DFEVar weight = Func.weighting(this, state_next, obsrv_in, weight_in, n, h, p, idxOfP, idxInP, weight_update);

		particle.get("w") <== weight;
		particle.get("s") <== state_next;

		return particle;
	}

	private DFEStruct getControl(DFEVar a, DFEStruct r_in, DFEVar write) {
		if (Def.NA>1){
			Memory<DFEStruct> memo = mem.alloc(Def.ref_t, Def.NA);
			DFEVar address = a;
			return memo.port(address, r_in, write, RamWriteMode.WRITE_FIRST);
		}else{
			DFEStruct refHold = Reductions.streamHold(r_in, write);
			return refHold;
		}
	}
}
