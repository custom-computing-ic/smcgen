/***
	Generate resamplied particle index based on CDF from Weight2CDFKernel.
*/

import com.maxeler.maxcompiler.v0.utils.MathUtils;
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.WrapMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;

public class CDF2IndexKernel extends Kernel {

	static int loopSize = 51; // Architecture dependent, can optimise

	protected CDF2IndexKernel(KernelParameters parameters) {
		super(parameters);

		DFEVar NP = io.scalarInput("NP", dfeUInt(MathUtils.bitsToRepresent(Def.NPMax-1))); // determined at run-time

		DFEVar y = control.count.makeCounter(
					control.count.makeParams(MathUtils.bitsToRepresent(Def.NPMax*Def.NA-1))
						.withWrapMode(WrapMode.STOP_AT_MAX)
						.withMax(NP*Def.NA)
				).getCount();

		// Write weights to memory in the first NP cycles
		DFEVar cdf_in = io.input("cdf", Def.float_t, y.cast(NP.getType())!==(NP*Def.NA));
		Memory<DFEVar> cdfmemo = mem.alloc(Def.float_t, Def.NPMax*Def.NA);
		cdfmemo.write(y.cast(dfeUInt(MathUtils.bitsToAddress(Def.NPMax*Def.NA))), cdf_in, y.cast(NP.getType())!==(NP*Def.NA));

		Counter pa_counter = control.count.makeCounter(
					control.count.makeParams(MathUtils.bitsToRepresent(loopSize))
						.withMax(loopSize)
				);
		DFEVar pa = pa_counter.getCount();
		Counter p_counter = control.count.makeCounter(
					control.count.makeParams(MathUtils.bitsToRepresent(Def.NPMax*3-1))
						.withEnable(pa_counter.getWrap())
						.withWrapMode(WrapMode.STOP_AT_MAX)
				);
		DFEVar p = p_counter.getCount();
		DFEVar a = (Def.NA==1) ? constant.var(dfeUInt(1),0) : pa.cast(dfeUInt(MathUtils.bitsToRepresent(Def.NA-1)));
		DFEVar notLooping = pa < Def.NA;

		DFEVar NP2_long = NP.cast(p.getType())*2;

		DFEVar k = dfeUInt(MathUtils.bitsToRepresent(Def.NPMax)).newInstance(this);
		DFEVar j = dfeUInt(MathUtils.bitsToRepresent(Def.NPMax)).newInstance(this);
		DFEVar didFind = dfeBool().newInstance(this);

		// Read weights and stored resampled index from cycle NP to 3NP-1
		DFEVar cdfmemoAddr = (Def.NA==1) ? k.cast(dfeUInt(MathUtils.bitsToRepresent(Def.NPMax-1))) : k.cast(dfeUInt(MathUtils.bitsToRepresent(Def.NPMax-1))) # a;
		DFEVar cdf = cdfmemo.read(cdfmemoAddr);

		k <== p===1 ? 0 : (stream.offset(k, -loopSize) + (didFind ? 0 : constant.var(k.getType(), 1))); // resampled index
		j <== p===1 ? 0 : (stream.offset(j, -loopSize) + (didFind ? 1 : constant.var(j.getType(), 0))); // index count

		DFEVar rand = io.input("rand", Def.float_t, p===0 & pa < (Def.NA<4 ? 4 : Def.NA));
		DFEVar uj = Def.float_t.newInstance(this);
		if (Def.NA>1){
			Memory<DFEVar> rmemo = mem.alloc(Def.float_t, Def.NA);
			rmemo.write(a, rand, p===0 & notLooping);
			uj <== j.cast(Def.float_t)/NP.cast(Def.float_t) + rmemo.read(a);
		}else{
			DFEVar randHold = Reductions.streamHold(rand, p===0 & notLooping);
			uj <== j.cast(Def.float_t)/NP.cast(Def.float_t) + randHold;
		}

		DFEVar found = (uj < cdf);
		didFind <== stream.offset(found, -loopSize);

		Memory<DFEVar> imemo = mem.alloc(dfeUInt(MathUtils.bitsToRepresent(Def.NPMax-1)), Def.NPMax*Def.NA);
		DFEVar imemoWrAddr = (Def.NA==1) ? j.cast(dfeUInt(MathUtils.bitsToRepresent(Def.NPMax-1))) : j.cast(dfeUInt(MathUtils.bitsToRepresent(Def.NPMax-1))) # a;
		imemo.write(imemoWrAddr, k.cast(dfeUInt(MathUtils.bitsToRepresent(Def.NPMax-1))), found & notLooping & p < NP2_long & j.cast(NP.getType()) < NP);

		// Output weights from cycle 3NP to 4NP-1
		DFEVar imemoRdAddr = (Def.NA==1) ? (p-NP2_long).cast(dfeUInt(MathUtils.bitsToRepresent(Def.NPMax-1))) : (p-NP2_long).cast(dfeUInt(MathUtils.bitsToRepresent(Def.NPMax-1))) # a;
		io.output("index_out", dfeUInt(32), p >= NP2_long & notLooping) <== imemo.read(imemoRdAddr).cast(dfeUInt(32));

		//debug.printf(p >= NP2_long & notLooping, "p: %d addr: %d data: %d\n", p, imemoRdAddr, imemo.read(imemoRdAddr).cast(dfeUInt(32)));

	}

}
