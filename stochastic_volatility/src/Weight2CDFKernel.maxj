/***
	Build a CDF using weight from the SMC kernel.
*/

import java.util.ArrayList;
import com.maxeler.maxcompiler.v0.utils.MathUtils;
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.WrapMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;

public class Weight2CDFKernel extends Kernel {

	static int loopSize = Math.max(15, Def.NA); // Architecture dependent, can optimise

	protected Weight2CDFKernel(KernelParameters parameters) {
		super(parameters);

		DFEVar NP = io.scalarInput("NP", dfeUInt(MathUtils.bitsToRepresent(Def.NPMax-1))); // determined at run-time

		// Counters for stage 1
		Counter a_counter = control.count.makeCounter(
					control.count.makeParams(MathUtils.bitsToRepresent(loopSize))
						.withMax(loopSize)
				);
		DFEVar a = a_counter.getCount();
		Counter p_counter = control.count.makeCounter(
					control.count.makeParams(MathUtils.bitsToRepresent(Def.NPMax)) // need one more bit for the last cycle
						.withEnable(a_counter.getWrap())
						.withWrapMode(WrapMode.STOP_AT_MAX)
						.withMax(NP)
				);
		DFEVar p = p_counter.getCount();
		DFEVar used = a < Def.NA;

		// Counter for stage 2
		DFEVar raddr = control.count.makeCounter(
					control.count.makeParams(MathUtils.bitsToRepresent(Def.NA*Def.NPMax-1))
						.withEnable((p===(NP-1).cast(p.getType()) & p_counter.getWrap()) | p===NP.cast(p.getType()))
				).getCount();

		DFEVector<DFEVar> weight = io.input("weight_in", Def.weight_io_t, used & p!==NP.cast(p.getType()) & KMath.modulo(p,Def.NC_P)===0);
		DFEVector<DFEVar> weight_buffered = Def.weight_io_t.newInstance(this);
		ArrayList<DFEVar> list = new ArrayList<DFEVar>();
		if (Def.NA>1 & Def.NC_P>1){
			Memory<DFEVector<DFEVar>> weightmemo = mem.alloc(Def.weight_io_t, Def.NA);
			weightmemo.write(a.cast(dfeUInt(MathUtils.bitsToRepresent(Def.NA-1))), weight, used);
			weight_buffered <== weightmemo.read(a.cast(dfeUInt(MathUtils.bitsToRepresent(Def.NA-1))));
		}else{
			weight_buffered <== weight;
		}
		for(int i=0; i<Def.NC_P; i++)
			list.add(weight_buffered[i]);
		DFEVar weight_selected = (Def.NC_P==1) ? weight_buffered[0] : control.mux(KMath.modulo(p,Def.NC_P), list);

		// Write CDF
		DFEVar cdf = Def.float_t.newInstance(this);
		cdf <== weight_selected + (p===0 ? 0 : stream.offset(cdf, -loopSize));

		// Write and read sum
		DFEVar sum = Def.float_t.newInstance(this);
		if (Def.NA>1){
			Memory<DFEVar> summemo = mem.alloc(Def.float_t, Def.NA);
			summemo.write(a.cast(dfeUInt(MathUtils.bitsToRepresent(Def.NA-1))), cdf, p===(NP-1).cast(p.getType()) & used);
			sum <== summemo.read(raddr.cast(dfeUInt(MathUtils.bitsToRepresent(Def.NA-1))));
		}else{
			sum <== Reductions.streamHold(cdf, p===(NP-1).cast(p.getType()));
		}

		// Read CDF
		Memory<DFEVar> cdfmemo = mem.alloc(Def.float_t, Def.NPMax*Def.NA);
		DFEVar waddr = (Def.NA==1) ? p.cast(dfeUInt(MathUtils.bitsToRepresent(Def.NPMax-1))) : p.cast(dfeUInt(MathUtils.bitsToRepresent(Def.NPMax-1))) # a;
		cdfmemo.write(waddr, cdf, p!==NP.cast(p.getType()) & used);

		DFEVar cdf_scaled = cdfmemo.read(raddr)/sum;

		io.output("cdf", Def.float_t, p===NP.cast(p.getType())) <== cdf_scaled;

		//debug.printf("CDF: %f Sum: %f\n", cdf, sum);
		//debug.printf(p!==NP.cast(p.getType()) & used, "waddr: %d cdf: %f\n", waddr, cdf);
		//debug.printf(p===NP.cast(p.getType()), "raddr: %d cdf read: %f\n", raddr, cdfmemo.read(raddr));
	}

}
