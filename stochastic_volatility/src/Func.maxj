/***
	Code of application specific functions for the FPGA engine.
	User has to customise this file.
*/

import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStruct;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;

public class Func{

	/***
		User customised sampling function
	*/
	public static DFEStruct sampling(SmcKernel smc, DFEStruct s_in, DFEStruct seeds, DFEVar S) {

		DFEStruct s_out = Def.state_t.newInstance(smc);

		DFEVar x = s_in.get("x");

		DFEVar seed_a = seeds.get("a");
		
		s_out.get("x") <== KMath.nrand(smc, seed_a, 0.91*x, S*1.0);

		return s_out;
	}

	/***
		User customised weighting function
	*/
	public static DFEVar weighting(SmcKernel smc, DFEStruct s_in, DFEVar o_in, DFEVar w_in, DFEVar n, DFEVar h, DFEVar p) {

		// State input
		DFEVar state = s_in.get("x");
		
		// Observation input
		DFEVar obsrv = o_in;
		DFEVar obsrvHold = Reductions.streamHold(obsrv, n===0 & h===0 & p===0);

		// Score calculation
		DFEVar score = KMath.exp(-0.5*(state+KMath.powSq(obsrvHold)*KMath.exp(-state)));
		// Constaint handling
		// Weight accumulation
		DFEVar weight = score*w_in;

		//smc.debug.simPrintf("Obsrv_in: %f State: %f Var: %f Score: %f\n", obsrvHold, state, KMath.exp(state/2.0), score);
		
		return weight;

	}

	/* Other user functions */
	public static DFEVector<DFEStruct> state_conv_in(SmcKernel smc, DFEVector<DFEStruct> s_in) {
		
		DFEVector<DFEStruct> s_out = Def.state_int_t.newInstance(smc);

		for(int j=0; j<Def.NC_P; j++)
			s_out[j].get("x") <== s_in[j].get("x").cast(Def.float_t);
		return s_out;
	}

	public static DFEVar obsrv_conv_in(SmcKernel smc, DFEVar o_in) {
		
		return o_in.cast(Def.float_t);
	}

	public static DFEVector<DFEVar> weight_conv_out(SmcKernel smc, DFEVector<DFEVar> w_in) {
		
		DFEVector<DFEVar> w_out = Def.weight_io_t.newInstance(smc);

		for(int j=0; j<Def.NC_P; j++)
			w_out[j] <== w_in[j].cast(Def.float_std_t);
		return w_out;
	}

	public static DFEVector<DFEStruct> state_conv_out(SmcKernel smc, DFEVector<DFEStruct> s_in) {
		
		DFEVector<DFEStruct> s_out = Def.state_io_t.newInstance(smc);

		for(int j=0; j<Def.NC_P; j++)
			s_out[j].get("x") <== s_in[j].get("x").cast(Def.float_std_t);
		return s_out;
	}

}
