/***
	User has to customise this file to define data types and parameters.
*/

import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStruct;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStructType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStructType.StructFieldType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;

public class Def {

	/*** Computation precision */
	static final DFEType float_t = KernelLib.dfeFloat(8, 24); // Custom or reduced precision
	static final DFEType float_std_t = KernelLib.dfeFloat(8, 24); // Nearest standard precision (multiple of 16 bits)

	/*** Seeds struct */
	public static final DFEStructType seeds_t = new DFEStructType(
		new StructFieldType("a", KernelLib.dfeRawBits(128))
	);
	public static int seed_slot = 1;

	/*** State struct */
	public static final DFEStructType state_t = new DFEStructType(
		new StructFieldType("x", float_t)
	);
	public static final DFEStructType state_std_t = new DFEStructType(
		new StructFieldType("x", float_std_t)
	);
	public static int state_slot = 1;

	/*** Particle struct */
	public static final DFEStructType particle_t = new DFEStructType(
		new StructFieldType("w", float_t),
		new StructFieldType("s", state_t)
	);

	/*** Design Parameters */
	public static int NPMin = 96;
	public static int NPMax = 4096;
	public static int NA = 1;
	public static int H = 1;

	/*** System Parameters */
	public static int NC_inner = 1; // Parallelisation along itl_inner, between 1 and 4 inclusive
	public static int NC_P = 16; // Parallelisation along NP, should be divisor of NP
	public static int Clk_core = 150; // FPGA core clock frequency
	public static int Clk_mem = 350; // FPGA onboard DRAM frequency (MAX3: 300,333,350,400; MAX4:333,400,533)
	public static int FPGA_resampling = 0; // 1: resampling on FPGA; 0: resampling on CPU
	public static int Use_DRAM = 0; // 1: use onboard DRAM for state IO; 0: stream in/out state directly from/to host

	// Vectors for multiple cores
	public static final DFEVectorType<DFEStruct> seeds_input_t = new DFEVectorType<DFEStruct>(seeds_t,NC_inner*NC_P);
	public static final DFEVectorType<DFEStruct> particle_array_t = new DFEVectorType<DFEStruct>(particle_t,NC_inner*NC_P);
	public static final DFEVectorType<DFEVar> weight_int_t = new DFEVectorType<DFEVar>(float_t,NC_P);
	public static final DFEVectorType<DFEStruct> state_int_t = new DFEVectorType<DFEStruct>(state_t,NC_P);
	public static final DFEVectorType<DFEVar> weight_io_t = new DFEVectorType<DFEVar>(float_std_t,NC_P);
	public static final DFEVectorType<DFEStruct> state_io_t = new DFEVectorType<DFEStruct>(state_std_t,NC_P);

}
