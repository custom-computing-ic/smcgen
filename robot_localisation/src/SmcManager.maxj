/***
	Manager for the sequential Monte Carlo FPGA kernel.
*/

import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.MemoryControlGroup.MemoryAccessPattern;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface.Direction;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.GeneratedInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceMath;
import com.maxeler.maxcompiler.v2.managers.BuildConfig;

public class SmcManager extends CustomManager {

	public SmcManager(SmcEngineParameters engineParameters) {
		super(engineParameters);

		KernelBlock smcBlock = addKernel(new SmcKernel(makeKernelParameters("SmcKernel")));

		if (Def.Use_DRAM==1){
			addStreamToOnCardMemory("state_in_to_mem", MemoryAccessPattern.LINEAR_1D) <== addStreamFromCPU("state_in");
			smcBlock.getInput("state_in") <== addStreamFromOnCardMemory("state_in_from_mem", MemoryAccessPattern.LINEAR_1D);
			addStreamToOnCardMemory("state_out_to_mem", MemoryAccessPattern.LINEAR_1D) <== smcBlock.getOutput("state_out");
			addStreamToCPU("state_out") <== addStreamFromOnCardMemory("state_out_from_mem", MemoryAccessPattern.LINEAR_1D);
		}else{
			smcBlock.getInput("state_in") <== addStreamFromCPU("state_in");
			addStreamToCPU("state_out") <== smcBlock.getOutput("state_out");
		}

		smcBlock.getInput("ref_in") <== addStreamFromCPU("ref_in");
		smcBlock.getInput("obsrv_in") <== addStreamFromCPU("obsrv_in");
		smcBlock.getInput("seed_in") <== addStreamFromCPU("seed_in");

		if(Def.FPGA_resampling==1){
			KernelBlock weight2cdfBlock = addKernel(new Weight2CDFKernel(makeKernelParameters("Weight2CDFKernel")));
			KernelBlock cdf2IndexBlock = addKernel(new CDF2IndexKernel(makeKernelParameters("CDF2IndexKernel")));
			weight2cdfBlock.getInput("weight_in") <== smcBlock.getOutput("weight_out");
			cdf2IndexBlock.getInput("cdf") <== weight2cdfBlock.getOutput("cdf");
			cdf2IndexBlock.getInput("rand") <== addStreamFromCPU("rand");
			if (Def.Use_DRAM==1){
				addStreamToOnCardMemory("index_out_to_mem", MemoryAccessPattern.LINEAR_1D) <== cdf2IndexBlock.getOutput("index_out");
				addStreamToCPU("index_out") <== addStreamFromOnCardMemory("index_out_from_mem", MemoryAccessPattern.LINEAR_1D);
			}else{
				addStreamToCPU("index_out") <== cdf2IndexBlock.getOutput("index_out");
			}
		}else{
			if (Def.Use_DRAM==1){
				addStreamToOnCardMemory("weight_out_to_mem", MemoryAccessPattern.LINEAR_1D) <== smcBlock.getOutput("weight_out");
				addStreamToCPU("weight_out") <== addStreamFromOnCardMemory("weight_out_from_mem", MemoryAccessPattern.LINEAR_1D);
			}else{
				addStreamToCPU("weight_out") <== smcBlock.getOutput("weight_out");
			}
		}

		createSLiCinterface(modeDefault());
		if (Def.Use_DRAM==1){
			createSLiCinterface(writeState());
			createSLiCinterface(readState());
			createSLiCinterface(readWeight());
		}

		configBuild(engineParameters);
	}

	private GeneratedInterface writeState() {
		EngineInterface engine_interface = new EngineInterface("write");
		CPUTypes   type = CPUTypes.FLOAT;
		int        size = type.sizeInBytes();

		InterfaceParam NP = engine_interface.addParam("NP", CPUTypes.INT);

		engine_interface.setLMemLinear("state_in_to_mem", engine_interface.addConstant(0), NP * Def.NA * Def.state_slot * size);
		engine_interface.setStream("state_in", type, NP * Def.NA * Def.state_slot * size);

		engine_interface.ignoreAll(Direction.IN_OUT);

		return engine_interface;
	}

	private GeneratedInterface readState() {
		EngineInterface engine_interface = new EngineInterface("read");
		CPUTypes   type = CPUTypes.FLOAT;
		int        size = type.sizeInBytes();

		InterfaceParam NP = engine_interface.addParam("NP", CPUTypes.INT);

		engine_interface.setLMemLinear("state_out_from_mem", NP * Def.NA * Def.state_slot * size, NP * Def.NA * Def.state_slot * size);
		engine_interface.setStream("state_out", type, NP * Def.NA * Def.state_slot * size);

		engine_interface.ignoreAll(Direction.IN_OUT);

		return engine_interface;
	}

	private GeneratedInterface readWeight() {
		EngineInterface engine_interface = new EngineInterface("read_w");
		CPUTypes   typeI = CPUTypes.FLOAT;
		CPUTypes   typeF = CPUTypes.FLOAT;
		int        sizeI = typeI.sizeInBytes();
		int        sizeF = typeF.sizeInBytes();

		InterfaceParam NP = engine_interface.addParam("NP", CPUTypes.INT);

		if(Def.FPGA_resampling==1){
			engine_interface.setLMemLinear("index_out_from_mem", NP * Def.NA * Def.state_slot * sizeI * 2, NP * Def.NA * sizeI);
			engine_interface.setStream("index_out", typeI, NP * Def.NA * sizeI);
		}else{
			engine_interface.setLMemLinear("weight_out_from_mem", NP * Def.NA * Def.state_slot * sizeF * 2, NP * Def.NA * sizeF);
			engine_interface.setStream("weight_out", typeF, NP * Def.NA * sizeF);
		}

		engine_interface.ignoreAll(Direction.IN_OUT);

		return engine_interface;
	}

	private static EngineInterface modeDefault() {
		EngineInterface engine_interface = new EngineInterface();

		int size = CPUTypes.FLOAT.sizeInBytes();
		InterfaceParam itl_inner = engine_interface.addParam("itl_inner", CPUTypes.INT);
		InterfaceParam NP = engine_interface.addParam("NP", CPUTypes.INT);
		InterfaceParam S = engine_interface.addParam("S", CPUTypes.FLOAT);

		engine_interface.setScalar("SmcKernel", "itl_inner", itl_inner);
		engine_interface.setScalar("SmcKernel", "NP", NP);
		engine_interface.setOffset("SmcKernel", "offsetNP", NP-Def.NPMin);
		engine_interface.setScalar("SmcKernel", "S", S);

		if (Def.Use_DRAM==1){
			engine_interface.setLMemLinearWrapped("state_in_from_mem",
					engine_interface.addConstant(0),
					NP * Def.NA * Def.state_slot * size,
					itl_inner * NP * Def.NA * Def.state_slot * size,
					engine_interface.addConstant(0));
			engine_interface.ignoreLMem("state_in_to_mem");
			engine_interface.setLMemLinearWrapped("state_out_to_mem",
					NP * Def.NA * Def.state_slot * size,
					NP * Def.NA * Def.state_slot * size,
					itl_inner * NP * Def.NA * Def.state_slot * size,
					engine_interface.addConstant(0));
			engine_interface.ignoreLMem("state_out_from_mem");
			if(Def.FPGA_resampling==1){
				engine_interface.setLMemLinearWrapped("index_out_to_mem",
						NP * Def.NA * Def.state_slot * size * 2,
						NP * Def.NA * size,
						itl_inner * NP * Def.NA * size,
						engine_interface.addConstant(0));
				engine_interface.ignoreLMem("index_out_from_mem");
			}else{
				engine_interface.setLMemLinearWrapped("weight_out_to_mem",
						NP * Def.NA * Def.state_slot * size * 2,
						NP * Def.NA * size,
						itl_inner * NP * Def.NA * size,
						engine_interface.addConstant(0));
				engine_interface.ignoreLMem("weight_out_from_mem");
			}
		}
		engine_interface.setTicks("SmcKernel", InterfaceMath.ceil(itl_inner/(Def.NC_inner*1.0)).cast(CPUTypes.INT32) * (NP/(Def.NC_P*1.0)).cast(CPUTypes.INT32) * Def.NA * Def.H);
		if(Def.FPGA_resampling==1){
			engine_interface.setScalar("Weight2CDFKernel", "NP", NP);
			engine_interface.setScalar("CDF2IndexKernel", "NP", NP);
			engine_interface.setTicks("Weight2CDFKernel", Weight2CDFKernel.loopSize * NP + Def.NA * NP);
			engine_interface.setTicks("CDF2IndexKernel", 3 * CDF2IndexKernel.loopSize * NP);
		}

		// Inputs and outputs
		engine_interface.setStream("ref_in", CPUTypes.FLOAT, Def.NA * Def.ref_slot * size * (Def.NA==1 ? 2 : 1));
		engine_interface.setStream("obsrv_in", CPUTypes.FLOAT, Def.NA * size * (Def.NA==1 ? 4 : Def.NA==2 ? 2 : Def.NA==3 ? 4/3 : 1));
		engine_interface.setStream("seed_in", CPUTypes.INT32, Def.NC_inner * Def.seed_slot * 16 * Def.NC_inner * Def.NC_P * 3); // 16: byte of a 128-bit seed; 3: init in the first 3 cycles
		if(Def.FPGA_resampling==1){
			engine_interface.setStream("rand", CPUTypes.FLOAT, Def.NA * size * (Def.NA==1 ? 4 : Def.NA==2 ? 2 : Def.NA==3 ? 4/3 : 1));
		}

		if (Def.Use_DRAM==1){
			engine_interface.ignoreStream("state_in");
			engine_interface.ignoreStream("state_out");
			if(Def.FPGA_resampling==1){
				engine_interface.ignoreStream("index_out");
			}else{
				engine_interface.ignoreStream("weight_out");
			}
		}else{
			engine_interface.setStream("state_in", CPUTypes.FLOAT, NP * Def.NA * Def.state_slot * size);
			engine_interface.setStream("state_out", CPUTypes.FLOAT, NP * Def.NA * Def.state_slot * size);
			if(Def.FPGA_resampling==1){
				engine_interface.setStream("index_out", CPUTypes.INT32, Def.NA * NP * size);
			}else{
				engine_interface.setStream("weight_out", CPUTypes.FLOAT, Def.NA * NP * size);
			}
		}

		return engine_interface;
	}


	private void configBuild(SmcEngineParameters params) {
		BuildConfig buildConfig = getBuildConfig();
		buildConfig.setMPPRCostTableSearchRange(params.getMPPRStartCT(), params.getMPPREndCT());
		buildConfig.setMPPRParallelism(params.getMPPRThreads());
		buildConfig.setMPPRRetryNearMissesThreshold(params.getMPPRRetryThreshold());
		buildConfig.setBuildEffort(BuildConfig.Effort.HIGH);
		buildConfig.setMPPRCostTableSearchRange(1, 6);        // set to enable MPPR
		buildConfig.setMPPRParallelism(6);
	}

	public static void main(String[] args) {
		SmcManager manager = new SmcManager(new SmcEngineParameters(args));
		manager.config.setAllowNonMultipleTransitions(true);
		manager.config.setOnCardMemoryFrequency(Def.Clk_mem);
		manager.config.setDefaultStreamClockFrequency(Def.Clk_core);
		manager.build();
	}
}
