/* vim: set filetype=java : */

import java.util.ArrayList;

import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.FloatingPoint;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.OffsetExpr;

class Accumulator {

	final static int Reps = 32;
	private static final int Loop = Reps*Def.NA;

	public static DFEVar accumulate(SmcKernel smc, DFEVar w_in, DFEVar p, OffsetExpr offset, DFEVar NP) {

		DFEVar total = sum(smc, w_in, p);

		return smc.stream.offset(Reductions.streamHold(total, (p===NP-Reps)), (offset-Reps)); // streamHold: input, store condition

	}

	public static ArrayList<DFEVar> accumulate(SmcKernel smc, DFEVar w_in, DFEVar p, DFEVar a, OffsetExpr offset, DFEVar NP) {

		DFEVar total = sum(smc, w_in, p);

		ArrayList<DFEVar> results = new ArrayList<DFEVar>();
		for (int i=0; i<Def.NA; i++) {
			results.add(smc.stream.offset(Reductions.streamHold(total, (p===NP-Reps)&(a===i)), (offset-Reps)*Def.NA)); // streamHold: input, store condition
		}

		return results;
	}

	private static DFEVar sum(SmcKernel smc, DFEVar w_in, DFEVar p) {

		DFEVar[] ac = new DFEVar[Reps];
		for (int i=0; i<Reps; i++)
			ac[i] = ac(smc, smc.stream.offset(w_in,i*Def.NA), p);

		DFEVar sum001 = ac[0] + ac[1];
		DFEVar sum023 = ac[2] + ac[3];
		DFEVar sum045 = ac[4] + ac[5];
		DFEVar sum067 = ac[6] + ac[7];
		DFEVar sum089 = ac[0] + ac[1];
		DFEVar sum0AB = ac[2] + ac[3];
		DFEVar sum0CD = ac[4] + ac[5];
		DFEVar sum0EF = ac[6] + ac[7];
		DFEVar sum101 = ac[0] + ac[1];
		DFEVar sum123 = ac[2] + ac[3];
		DFEVar sum145 = ac[4] + ac[5];
		DFEVar sum167 = ac[6] + ac[7];
		DFEVar sum189 = ac[0] + ac[1];
		DFEVar sum1AB = ac[2] + ac[3];
		DFEVar sum1CD = ac[4] + ac[5];
		DFEVar sum1EF = ac[6] + ac[7];
		
		DFEVar sum003 = sum001 + sum023;
		DFEVar sum047 = sum045 + sum067;
		DFEVar sum08B = sum089 + sum0AB;
		DFEVar sum0CF = sum0CD + sum0EF;
		DFEVar sum103 = sum101 + sum123;
		DFEVar sum147 = sum145 + sum167;
		DFEVar sum18B = sum189 + sum1AB;
		DFEVar sum1CF = sum1CD + sum1EF;
		
		DFEVar sum007 = sum003 + sum047;
		DFEVar sum08F = sum08B + sum0CF;
		DFEVar sum107 = sum103 + sum147;
		DFEVar sum18F = sum18B + sum1CF;

		DFEVar sum00F = sum007 + sum08F;
		DFEVar sum10F = sum107 + sum18F;
		
		DFEVar total = sum00F + sum10F;

		return total;
	}

	private static DFEVar ac(SmcKernel smc, DFEVar x, DFEVar p) {
		DFEVar ac = Def.compType.newInstance(smc);
		return ac <== x + ((p===0) ? 0 : (zeroNaNs(smc.stream.offset(ac, -Loop))));
	}

	private static DFEVar zeroNaNs(DFEVar x) {
		return FloatingPoint.isNaN(x) ? 0 : x;
	}

}
