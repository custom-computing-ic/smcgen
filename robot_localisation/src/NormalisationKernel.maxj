/* vim: set filetype=java : */

import com.maxeler.maxcompiler.v0.utils.MathUtils;
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;

public class NormalisationKernel extends Kernel {

	protected NormalisationKernel(KernelParameters parameters) {
		super(parameters);

		DFEVar NP = io.scalarInput("NP", dfeUInt(MathUtils.bitsToRepresent(Def.NPMax))); // determined at run-time

		Counter a_counter = control.count.makeCounter(
					control.count.makeParams(
						MathUtils.bitsToRepresent(Def.NA))
				);
		DFEVar p_counter_en = Def.NA==1 ? constant.var(dfeUInt(1),1) : a_counter.getWrap();
		Counter p_counter = control.count.makeCounter(
					control.count.makeParams(
						MathUtils.bitsToRepresent(Def.NPMax))
						.withEnable(p_counter_en)
						.withMax(NP)
				);
		DFEVar p = p_counter.getCount();

		DFEVar cdf = io.input("cdf_in", Def.compType);
		DFEVar sum = io.input("sum_in", Def.compType, p===0);
		
		io.output("cdf_out", Def.compType) <== cdf/sum;

		//debug.printf("cdf_in: %f sum_in: %f cdf_out: %f\n", cdf, sum, cdf/sum);
	}
}
