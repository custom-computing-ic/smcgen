/***
	Mathematical operators for the FPGA engine.
*/

import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.KernelMath;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.KernelMath.Range;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;

public class KMath {

	static DFEVar min(DFEVar x, DFEVar y) {
		return KernelMath.min(x,y);
	}

	static DFEVar max(DFEVar x, DFEVar y) {
		return KernelMath.max(x,y);
	}

	static DFEVar ceil(DFEVar x) {
		return KernelMath.ceil(x);
	}

	static DFEVar modulo(DFEVar x, int base) {
		return KernelMath.modulo(x,base);
	}

	static DFEVar sin(DFEVar x) {
		return KernelMath.sin(x);
	}

	static DFEVar cos(DFEVar x) {
		return KernelMath.cos(x);
	}

	static DFEVar exp(DFEVar x) {
		return KernelMath.exp(x);
	}

	static DFEVar log(DFEVar x, Range inputRange) {
		return KernelMath.log(inputRange , x, x.getType());
	}

	static DFEVar powSq(DFEVar x) {
		return x*x;
	}

	static DFEVar pow(DFEVar x, double pow, double minX, double maxX) {
		Range inputRange = new Range(pow * Math.min(minX,maxX), pow * Math.max(minX,maxX));
		return exp(log(x, inputRange) * pow);
	}

	public static DFEVar abs(DFEVar x) {
		return KernelMath.abs(x);
	}

	public static DFEVar sqrt(DFEVar x) {
		return KernelMath.sqrt(x);
	}

	public static DFEVar sqrt2(DFEVar x, DFEType y) {
		return KernelMath.sqrt(new Range(0, 100), x, y);
	}

	public static DFEVar ln(DFEVar x, DFEType y) {
		return KernelMath.log(new Range(0, 1), x, y);
	}

	public static DFEVar addTreeVector(DFEVector<DFEVar> vector, int begin, int end) {
		if (begin==end){
			return vector[begin];
		}
		int middle = begin + (end - begin)/2;
		return addTreeVector(vector,begin,middle) + addTreeVector(vector,middle+1,end);
	}

	public static DFEVar minTreeVector(DFEVector<DFEVar> vector, int begin, int end) {
		if (begin==end){
			return vector[begin];
		}
		int middle = begin + (end - begin)/2;
		return min(minTreeVector(vector,begin,middle),minTreeVector(vector,middle+1,end));
	}

	public static DFEVar minTreeStream(SmcKernel smc, DFEVar src, int left, int right) {
		if (left==right){
			return smc.stream.offset(src,-left);
		}
		int middle = left + (right - left)/2;
		return min(minTreeStream(smc,src,left,middle),minTreeStream(smc,src,middle+1,right));
	}

	public static DFEVar minTreeStream8(SmcKernel smc, DFEVar src) {
		DFEVar min2 = min(src,smc.stream.offset(src, -1));
		DFEVar min4 = min(min2,smc.stream.offset(min2, -2));
		DFEVar min8 = min(min4,smc.stream.offset(min4, -4));
		return min8;
	}

	// Guassian random number generator
	public static DFEVar nrand(SmcKernel smc, DFEVar seed, DFEVar mean, DFEVar std) {

		UrandomCore urng = new UrandomCore(smc, seed);
		NrandomCore nrng = new NrandomCore(smc, urng.getRandOut());

		return nrng.getOutput()*std + mean;
	}

}
